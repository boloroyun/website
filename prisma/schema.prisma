// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ======================================
// ENUMS
// ======================================

enum Role {
  CLIENT
  STAFF
  ADMIN
}

enum OfferType {
  specialCombo
  crazyDeal
}

enum PricingType {
  fixed
  quote
  gallery
}

// ======================================
// COMPOSITE TYPES
// (For Embedded Documents)
// ======================================

type Image {
  url       String?
  public_id String?
}

type SubCategoryImage {
  url       String?
  public_id String?
}

type ProductColor {
  name  String
  color String  // Color hex code
  image String? // Optional image URL for color swatch
}

type ProductDetail {
  name  String
  value String
}

type ProductBenefit {
  name String
}

type ProductIngredient {
  name String
}

type ProductSize {
  size  String
  qty   Int
  price Float
  sold  Int    @default(0)
}

type SubProduct {
  sku                String?
  images             String[]
  description_images String[]
  color              ProductColor?
  sizes              ProductSize[]
  discount           Float?       @default(0)
  sold               Int?         @default(0)
}

type CartProduct {
  productId String // Kept as String to reference a product
  name      String?
  vendor    Json?
  image     String?
  size      String?
  qty       String? // Note: This was a String in your Mongoose model
  color     ProductColor?
  price     Float?
}

type OrderProduct {
  productId          String // Kept as String to reference a product
  name               String?
  image              String?
  size               String?
  qty                Int?
  price              Float?
  productCompletedAt DateTime?
}

type ShippingAddress {
  firstName   String?
  lastName    String?
  phoneNumber String?
  address1    String?
  address2    String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
}

type PaymentResult {
  id     String?
  status String?
  email  String?
}

type Address {
  firstName   String?
  lastName    String?
  phoneNumber String?
  address1    String?
  address2    String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  active      Boolean  @default(true)
}

type TopBarButton {
  text String?
  link String?
  textColor String
  backgroundColor String
}


// ======================================
// MODELS
// ======================================

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  tokenHash String   @unique
  expires   DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model LoginOTP {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  otpHash   String   @unique
  expires   DateTime
  usedAt    DateTime?
  attempts  Int      @default(0)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([expires])
}

model WebsiteAccount {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  username  String?
  name      String?
  role      Role     @default(CLIENT)
  image     String?
  
  // Website-specific fields
  defaultPaymentMethod String   @default("")
  address              Address?
  
  // Relations for website functionality
  cart     WebsiteCart?
  orders   WebsiteOrder[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  email                String   @unique
  password             String?  // Made optional for OTP authentication
  username             String?  @unique
  role                 Role     @default(CLIENT)
  defaultPaymentMethod String   @default("")
  address              Address?
  emailVerified        DateTime?
  image                String?

  // Relations
  cart                Cart?
  orders              Order[]
  reviews             Review[]
  accounts            Account[]
  sessions            Session[]
  passwordResetTokens PasswordResetToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  title           String         @unique
  description     String
  longDescription String
  brand           String?
  slug            String         @unique
  benefits        ProductBenefit[]
  ingredients     ProductIngredient[]
  rating          Float          @default(0)
  numReviews      Int            @default(0)
  featured        Boolean        @default(false)
  bestSeller      Boolean        @default(false)
  sku             String         @unique
  images          Image[]
  sizes           ProductSize[]
  colors          ProductColor[] 
  discount        Float?         @default(0)
  sold            Int?           @default(0)
  pricingType     PricingType    @default(fixed)
  finish          String?
  location        String?

  // Relations
  category      Category      @relation(fields: [categoryId], references: [id])
  categoryId    String        @db.ObjectId
  productSubCategories ProductSubCategory[]
  productReviews       ProductReview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  rating          Float    @default(0)
  review          String
  reviewCreatedAt DateTime
  verified        Boolean  @default(false)

  // Relations
  reviewBy      User     @relation(fields: [reviewById], references: [id])
  reviewById    String   @map("reviewBy") @db.ObjectId
  productReviews ProductReview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Explicit join model for Product and Review
model ProductReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, reviewId])
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  images    Image[]
  slug      String   @unique

  // Relations
  products      Product[]
  subCategories SubCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubCategory {
  id     String           @id @default(auto()) @map("_id") @db.ObjectId
  name   String           @unique
  slug   String           @unique
  images SubCategoryImage[]

  // Relations
  parent     Category  @relation(fields: [parentId], references: [id])
  parentId   String    @map("parent") @db.ObjectId
  productSubCategories ProductSubCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Explicit join model for Product and SubCategory
model ProductSubCategory {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  product       Product     @relation(fields: [productId], references: [id])
  productId     String      @db.ObjectId
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  subCategoryId String      @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, subCategoryId])
}

model Cart {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  products           CartProduct[]
  cartTotal          Float?
  totalAfterDiscount Float?

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WebsiteCart {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  products           CartProduct[]
  cartTotal          Float?
  totalAfterDiscount Float?

  // Relations
  account   WebsiteAccount @relation(fields: [accountId], references: [id])
  accountId String         @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  products            OrderProduct[]
  shippingAddress     ShippingAddress?
  paymentMethod       String?
  paymentResult       PaymentResult?
  total               Float
  status              String?         @default("Processing")
  totalBeforeDiscount Float?
  couponApplied       String?
  shippingPrice       Float           @default(0)
  taxPrice            Float?          @default(0)
  isPaid              Boolean         @default(false)
  totalSaved          Float?
  razorpay_order_id   String?
  razorpay_payment_id String?
  paidAt              DateTime?
  deliveredAt         DateTime?
  isNew               Boolean         @default(true)

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WebsiteOrder {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  products            OrderProduct[]
  shippingAddress     ShippingAddress?
  paymentMethod       String?
  paymentResult       PaymentResult?
  total               Float
  status              String?         @default("Processing")
  totalBeforeDiscount Float?
  couponApplied       String?
  shippingPrice       Float           @default(0)
  taxPrice            Float?          @default(0)
  isPaid              Boolean         @default(false)
  totalSaved          Float?
  razorpay_order_id   String?
  razorpay_payment_id String?
  paidAt              DateTime?
  deliveredAt         DateTime?
  isNew               Boolean         @default(true)

  // Relations
  account   WebsiteAccount @relation(fields: [accountId], references: [id])
  accountId String         @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Coupon {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  coupon    String   @unique
  startDate String // Kept as String to match Mongoose schema
  endDate   String // Kept as String to match Mongoose schema
  discount  Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HomeScreenOffer {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  link      String
  type      OfferType
  images    Image[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AppBanner {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  images    Image[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WebsiteBanner {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  images    Image[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TopBar {
  id     String        @id @default(auto()) @map("_id") @db.ObjectId
  title  String
  link   String
  textColor String
  backgroundColor String?
  button TopBarButton?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewsletterSubscription {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String   @unique
  subscribedAt DateTime @default(now())
  isActive     Boolean  @default(true)
  source       String?  // Track where the subscription came from (footer, popup, etc.)
  unsubscribedAt DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationCode {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  code      String
  username  String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ======================================
// BLOG MODELS
// ======================================

enum BlogStatus {
  draft
  published
  archived
}

type BlogImage {
  url       String?
  public_id String?
  alt       String?
  caption   String?
}

model BlogCategory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?  // Hex color for category theming
  image       Image?

  // Relations
  posts BlogPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogTag {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  slug  String @unique
  color String? // Hex color for tag theming

  // Relations
  posts BlogPostTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogPost {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  slug            String      @unique
  excerpt         String      // Short description for cards and SEO
  content         String      // Main blog content (HTML or Markdown)
  featuredImage   BlogImage?
  images          BlogImage[] // Additional images in the post
  status          BlogStatus  @default(draft)
  featured        Boolean     @default(false)
  published       Boolean     @default(false)
  publishedAt     DateTime?
  readTime        Int?        // Estimated read time in minutes
  views           Int         @default(0)
  likes           Int         @default(0)
  
  // SEO Fields
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  
  // Author information
  authorName      String
  authorEmail     String?
  authorImage     String?
  authorBio       String?

  // Relations
  category   BlogCategory @relation(fields: [categoryId], references: [id])
  categoryId String       @db.ObjectId
  tags       BlogPostTag[]
  comments   BlogComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([published])
  @@index([publishedAt])
  @@index([featured])
}

// Junction table for blog posts and tags (many-to-many)
model BlogPostTag {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  post   BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String   @db.ObjectId
  tag    BlogTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  String   @db.ObjectId

  createdAt DateTime @default(now())

  @@unique([postId, tagId])
}

model BlogComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  website   String?
  content   String
  approved  Boolean  @default(false)
  parentId  String?  @db.ObjectId // For nested comments
  
  // Relations
  post   BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String   @db.ObjectId
  parent BlogComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies BlogComment[] @relation("CommentReplies")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([approved])
}

// ======================================
// CRISP INTEGRATION MODELS
// ======================================

model CrispActivity {
  id        String   @id @default(cuid()) @map("_id")
  event     String
  email     String?
  sessionId String?
  payload   Json
  createdAt DateTime @default(now())

  @@index([event])
  @@index([email])
  @@index([sessionId])
  @@index([createdAt])
}

// ======================================
// QUOTE REQUEST MODELS
// ======================================

enum QuoteRequestStatus {
  NEW
  REVIEWING
  SENT
  APPROVED
  REJECTED
  CLOSED
}

model QuoteRequest {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  publicToken   String   @default(cuid()) @unique
  productName   String?
  productId     String?  @db.ObjectId
  sku           String?
  customerName  String?
  email         String
  phone         String?
  zip           String?
  dimensions    String?
  material      String?
  notes         String?
  status        QuoteRequestStatus @default(NEW)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  images        QuoteRequestImage[]
}

model QuoteRequestImage {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  quoteRequestId String  @db.ObjectId
  publicId       String
  secureUrl      String
  width          Int?
  height         Int?
  bytes          Int?
  format         String?
  originalName   String?

  request        QuoteRequest @relation(fields: [quoteRequestId], references: [id])
}